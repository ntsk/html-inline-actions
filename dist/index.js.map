{"version":3,"file":"index.js","sources":["../src/streaming-base64.ts","../src/html-inline.ts","../src/index.ts"],"sourcesContent":["import { Transform } from 'stream';\nimport { createReadStream } from 'fs';\nimport { pipeline } from 'stream';\nimport { promisify } from 'util';\nconst pipelineAsync = promisify(pipeline);\n/**\n * A streaming Transform class that converts binary data to Base64 encoding in chunks.\n *\n * This implementation provides memory-efficient Base64 encoding for large files by processing\n * data in small chunks rather than loading entire files into memory. The class handles the\n * 3-byte boundary requirement of Base64 encoding by buffering incomplete chunks and carrying\n * them over to the next transformation cycle.\n */\nexport class Base64Transform extends Transform {\n    constructor() {\n        super(...arguments);\n        this.remainder = Buffer.alloc(0);\n    }\n    _transform(chunk, encoding, callback) {\n        // Concatenate previous remainder with new chunk\n        const data = Buffer.concat([this.remainder, chunk]);\n        // Base64 requires 3-byte chunks, so calculate processable length (multiple of 3)\n        const processLength = Math.floor(data.length / 3) * 3;\n        if (processLength > 0) {\n            // Process the 3-byte aligned portion\n            const processData = data.slice(0, processLength);\n            this.push(processData.toString('base64'));\n            // Save remainder for next chunk\n            this.remainder = data.slice(processLength);\n        }\n        else {\n            // If less than 3 bytes, save all as remainder\n            this.remainder = data;\n        }\n        callback();\n    }\n    _flush(callback) {\n        // Process any remaining bytes at the end (with padding)\n        if (this.remainder.length > 0) {\n            this.push(this.remainder.toString('base64'));\n        }\n        callback();\n    }\n}\nexport async function streamToBase64(filePath) {\n    return new Promise((resolve, reject) => {\n        let base64Data = '';\n        const base64Transform = new Base64Transform();\n        base64Transform.on('data', (chunk) => {\n            base64Data += chunk;\n        });\n        base64Transform.on('end', () => {\n            resolve(base64Data);\n        });\n        base64Transform.on('error', reject);\n        const readStream = createReadStream(filePath);\n        readStream.pipe(base64Transform);\n        readStream.on('error', reject);\n    });\n}\nexport async function createDataUrl(filePath, mimeType) {\n    try {\n        const base64Data = await streamToBase64(filePath);\n        return `data:${mimeType};base64,${base64Data}`;\n    }\n    catch (error) {\n        throw new Error(`Failed to create data URL for ${filePath}: ${error}`);\n    }\n}\n","import { promises as fs } from 'fs';\nimport { resolve, relative, isAbsolute, extname } from 'path';\nimport { createDataUrl } from './streaming-base64.js';\nexport async function inlineHtml(filePath, options = {}) {\n    const htmlContent = await fs.readFile(filePath, 'utf-8');\n    const basedir = resolve(filePath, '..');\n    let result = htmlContent;\n    if (!options.ignoreStyles) {\n        result = await inlineStyles(result, basedir);\n    }\n    if (!options.ignoreScripts) {\n        result = await inlineScripts(result, basedir);\n    }\n    if (!options.ignoreImages) {\n        result = await inlineImages(result, basedir);\n    }\n    if (!options.ignoreLinks) {\n        result = await inlineLinks(result, basedir);\n    }\n    return result;\n}\nasync function inlineStyles(html, basedir) {\n    const linkRegex = /<link\\s+([^>]*rel=[\"']stylesheet[\"'][^>]*)>/gi;\n    let result = html;\n    let match;\n    while ((match = linkRegex.exec(html)) !== null) {\n        const linkTag = match[0];\n        const attributes = match[1];\n        const hrefMatch = attributes.match(/href=[\"']([^\"']+)[\"']/i);\n        if (hrefMatch) {\n            const href = hrefMatch[1];\n            const cssPath = fixPath(href, basedir);\n            try {\n                const cssContent = await fs.readFile(cssPath, 'utf-8');\n                const styleTag = `<style>${cssContent}</style>`;\n                result = result.replace(linkTag, styleTag);\n            }\n            catch (error) {\n                console.warn(`Could not inline stylesheet: ${cssPath}`);\n            }\n        }\n    }\n    return result;\n}\nasync function inlineScripts(html, basedir) {\n    const scriptRegex = /<script\\s+([^>]*src=[\"'][^\"']+[\"'][^>]*)><\\/script>/gi;\n    let result = html;\n    let match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        const scriptTag = match[0];\n        const attributes = match[1];\n        const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/i);\n        if (srcMatch) {\n            const src = srcMatch[1];\n            const jsPath = fixPath(src, basedir);\n            try {\n                const jsContent = await fs.readFile(jsPath, 'utf-8');\n                const inlineScript = `<script>${jsContent}</script>`;\n                result = result.replace(scriptTag, inlineScript);\n            }\n            catch (error) {\n                console.warn(`Could not inline script: ${jsPath}`);\n            }\n        }\n    }\n    return result;\n}\nasync function inlineImages(html, basedir) {\n    const imgRegex = /<img\\s+([^>]*src=[\"'][^\"']+[\"'][^>]*)>/gi;\n    let result = html;\n    let match;\n    while ((match = imgRegex.exec(html)) !== null) {\n        const imgTag = match[0];\n        const attributes = match[1];\n        const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/i);\n        if (srcMatch) {\n            const src = srcMatch[1];\n            if (src.startsWith('data:')) {\n                continue;\n            }\n            const imgPath = fixPath(src, basedir);\n            try {\n                const ext = extname(imgPath).replace(/^\\./, '').toLowerCase();\n                const mimeType = getMimeType(ext);\n                const dataUrl = await createDataUrl(imgPath, mimeType);\n                const newImgTag = imgTag.replace(/src=[\"'][^\"']+[\"']/i, `src=\"${dataUrl}\"`);\n                result = result.replace(imgTag, newImgTag);\n            }\n            catch (error) {\n                console.warn(`Could not inline image: ${imgPath}`, error);\n            }\n        }\n    }\n    return result;\n}\nasync function inlineLinks(html, basedir) {\n    const linkRegex = /<link\\s+([^>]*href=[\"'][^\"']+[\"'][^>]*)>/gi;\n    let result = html;\n    let match;\n    while ((match = linkRegex.exec(html)) !== null) {\n        const linkTag = match[0];\n        const attributes = match[1];\n        const relMatch = attributes.match(/rel=[\"']([^\"']+)[\"']/i);\n        if (relMatch && relMatch[1].toLowerCase() === 'stylesheet') {\n            continue;\n        }\n        const hrefMatch = attributes.match(/href=[\"']([^\"']+)[\"']/i);\n        if (hrefMatch) {\n            const href = hrefMatch[1];\n            if (href.startsWith('data:')) {\n                continue;\n            }\n            const linkPath = fixPath(href, basedir);\n            try {\n                const linkBuffer = await fs.readFile(linkPath);\n                const ext = extname(linkPath).replace(/^\\./, '').toLowerCase();\n                const mimeType = getMimeType(ext);\n                const base64 = linkBuffer.toString('base64');\n                const dataUrl = `data:${mimeType};base64,${base64}`;\n                const newLinkTag = linkTag.replace(/href=[\"'][^\"']+[\"']/i, `href=\"${dataUrl}\"`);\n                result = result.replace(linkTag, newLinkTag);\n            }\n            catch (error) {\n                console.warn(`Could not inline link: ${linkPath}`);\n            }\n        }\n    }\n    return result;\n}\nfunction fixPath(p, basedir) {\n    if (isAbsolute(p)) {\n        return resolve(basedir, relative('/', p));\n    }\n    else {\n        return resolve(basedir, p);\n    }\n}\nfunction getMimeType(ext) {\n    const mimeTypes = {\n        svg: 'image/svg+xml',\n        png: 'image/png',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        gif: 'image/gif',\n        ico: 'image/x-icon',\n        woff: 'font/woff',\n        woff2: 'font/woff2',\n        ttf: 'font/ttf',\n        otf: 'font/otf'\n    };\n    return mimeTypes[ext] || 'application/octet-stream';\n}\n","import { promises as fs } from 'fs';\nimport { resolve, dirname, basename, extname, join } from 'path';\nimport { inlineHtml } from './html-inline.js';\n/**\n * Parse input paths from GitHub Actions environment variable.\n * Supports both YAML array format and comma-separated string format.\n */\nfunction parseInputPaths(pathsInput) {\n    if (!pathsInput)\n        return [];\n    try {\n        // Try parsing as JSON array (GitHub Actions converts YAML arrays to JSON)\n        const parsed = JSON.parse(pathsInput);\n        return Array.isArray(parsed) ? parsed : [parsed];\n    }\n    catch {\n        // Fallback to comma-separated string (legacy support)\n        return pathsInput.split(',').map(p => p.trim()).filter(p => p.length > 0);\n    }\n}\n/**\n * Find all HTML files in a directory recursively.\n */\nasync function findHtmlFiles(dirPath) {\n    const htmlFiles = [];\n    try {\n        const entries = await fs.readdir(dirPath, { withFileTypes: true });\n        for (const entry of entries) {\n            const fullPath = join(dirPath, entry.name);\n            if (entry.isDirectory()) {\n                // Recursively search subdirectories\n                const subFiles = await findHtmlFiles(fullPath);\n                htmlFiles.push(...subFiles);\n            }\n            else if (entry.isFile() && entry.name.toLowerCase().endsWith('.html')) {\n                htmlFiles.push(fullPath);\n            }\n        }\n    }\n    catch (error) {\n        console.warn(`Could not read directory: ${dirPath}`, error);\n    }\n    return htmlFiles;\n}\n/**\n * Expand paths to include HTML files from directories.\n */\nasync function expandPaths(inputPaths) {\n    const expandedPaths = [];\n    for (const inputPath of inputPaths) {\n        const resolvedPath = resolve(inputPath);\n        try {\n            const stat = await fs.stat(resolvedPath);\n            if (stat.isDirectory()) {\n                // If directory, find all HTML files\n                const htmlFiles = await findHtmlFiles(resolvedPath);\n                expandedPaths.push(...htmlFiles);\n            }\n            else if (stat.isFile()) {\n                // If file, add as-is\n                expandedPaths.push(resolvedPath);\n            }\n        }\n        catch (error) {\n            console.warn(`Path not found: ${inputPath}`);\n        }\n    }\n    return expandedPaths;\n}\nexport async function main() {\n    try {\n        const paths = process.env.INPUT_PATHS || '';\n        const inputPrefix = process.env.INPUT_PREFIX;\n        const inputSuffix = process.env.INPUT_SUFFIX;\n        const overwrite = process.env.INPUT_OVERWRITE === 'true';\n        const ignoreStyles = process.env['INPUT_IGNORE-STYLES'] === 'true';\n        const ignoreScripts = process.env['INPUT_IGNORE-SCRIPTS'] === 'true';\n        const ignoreImages = process.env['INPUT_IGNORE-IMAGES'] === 'true';\n        const ignoreLinks = process.env['INPUT_IGNORE-LINKS'] === 'true';\n        // If neither prefix nor suffix is specified, use default prefix\n        let prefix = '';\n        let suffix = '';\n        if (inputPrefix !== undefined) {\n            prefix = inputPrefix;\n        }\n        if (inputSuffix !== undefined) {\n            suffix = inputSuffix;\n        }\n        // Apply default prefix only if both are unspecified\n        if (inputPrefix === undefined && inputSuffix === undefined) {\n            prefix = 'inlined-';\n        }\n        if (!paths) {\n            throw new Error('Input paths are required');\n        }\n        // Parse input paths (supports YAML arrays and comma-separated strings)\n        const inputPaths = parseInputPaths(paths);\n        if (inputPaths.length === 0) {\n            throw new Error('No valid paths provided');\n        }\n        // Expand directories to HTML files\n        const expandedPaths = await expandPaths(inputPaths);\n        if (expandedPaths.length === 0) {\n            console.warn('No HTML files found in the specified paths');\n            return;\n        }\n        console.log(`Found ${expandedPaths.length} HTML file(s) to process`);\n        for (const filePath of expandedPaths) {\n            try {\n                await fs.access(filePath);\n            }\n            catch {\n                console.error(`File not accessible: ${filePath}`);\n                continue;\n            }\n            const inlinedHtml = await inlineHtml(filePath, {\n                ignoreStyles,\n                ignoreScripts,\n                ignoreImages,\n                ignoreLinks\n            });\n            let outputPath;\n            if (overwrite) {\n                outputPath = filePath;\n            }\n            else {\n                const dir = dirname(filePath);\n                const name = basename(filePath, extname(filePath));\n                const ext = extname(filePath);\n                // Handle flexible prefix/suffix combinations\n                let outputFileName;\n                if (prefix && suffix) {\n                    outputFileName = `${prefix}${name}${suffix}${ext}`;\n                }\n                else if (prefix && !suffix) {\n                    outputFileName = `${prefix}${name}${ext}`;\n                }\n                else if (!prefix && suffix) {\n                    // If suffix contains dot, treat it as part of extension\n                    if (suffix.startsWith('.')) {\n                        outputFileName = `${name}${suffix}${ext}`;\n                    }\n                    else {\n                        outputFileName = `${name}${suffix}${ext}`;\n                    }\n                }\n                else {\n                    // Both prefix and suffix are empty, use default suffix\n                    outputFileName = `${name}-inlined${ext}`;\n                }\n                outputPath = resolve(dir, outputFileName);\n            }\n            await fs.writeFile(outputPath, inlinedHtml, 'utf-8');\n            if (overwrite) {\n                console.log(`Overwritten: ${filePath}`);\n            }\n            else {\n                console.log(`Processed: ${filePath} -> ${outputPath}`);\n            }\n        }\n    }\n    catch (error) {\n        console.error('Error processing files:', error);\n        process.exit(1);\n    }\n}\nif (require.main === module) {\n    main();\n}\n"],"names":["fs"],"mappings":";;;;;AAIsB,SAAS,CAAC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,eAAe,SAAS,SAAS,CAAC;AAC/C,IAAI,WAAW,GAAG;AAClB,QAAQ,KAAK,CAAC,GAAG,SAAS,CAAC;AAC3B,QAAQ,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,IAAI;AACJ,IAAI,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC1C;AACA,QAAQ,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AAC3D;AACA,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;AAC7D,QAAQ,IAAI,aAAa,GAAG,CAAC,EAAE;AAC/B;AACA,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC;AAC5D,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACrD;AACA,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;AACtD,QAAQ;AACR,aAAa;AACb;AACA,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI;AACjC,QAAQ;AACR,QAAQ,QAAQ,EAAE;AAClB,IAAI;AACJ,IAAI,MAAM,CAAC,QAAQ,EAAE;AACrB;AACA,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACvC,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACxD,QAAQ;AACR,QAAQ,QAAQ,EAAE;AAClB,IAAI;AACJ;AACO,eAAe,cAAc,CAAC,QAAQ,EAAE;AAC/C,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,QAAQ,IAAI,UAAU,GAAG,EAAE;AAC3B,QAAQ,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE;AACrD,QAAQ,eAAe,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK;AAC9C,YAAY,UAAU,IAAI,KAAK;AAC/B,QAAQ,CAAC,CAAC;AACV,QAAQ,eAAe,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM;AACxC,YAAY,OAAO,CAAC,UAAU,CAAC;AAC/B,QAAQ,CAAC,CAAC;AACV,QAAQ,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;AAC3C,QAAQ,MAAM,UAAU,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AACrD,QAAQ,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC;AACxC,QAAQ,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;AACtC,IAAI,CAAC,CAAC;AACN;AACO,eAAe,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;AACxD,IAAI,IAAI;AACR,QAAQ,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC;AACzD,QAAQ,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACtD,IAAI;AACJ,IAAI,OAAO,KAAK,EAAE;AAClB,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;AAC9E,IAAI;AACJ;;ACjEO,eAAe,UAAU,CAAC,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AACzD,IAAI,MAAM,WAAW,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC;AAC5D,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;AAC3C,IAAI,IAAI,MAAM,GAAG,WAAW;AAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;AAC/B,QAAQ,MAAM,GAAG,MAAM,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;AACpD,IAAI;AACJ,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AAChC,QAAQ,MAAM,GAAG,MAAM,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC;AACrD,IAAI;AACJ,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;AAC/B,QAAQ,MAAM,GAAG,MAAM,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;AACpD,IAAI;AACJ,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AAC9B,QAAQ,MAAM,GAAG,MAAM,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC;AACnD,IAAI;AACJ,IAAI,OAAO,MAAM;AACjB;AACA,eAAe,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE;AAC3C,IAAI,MAAM,SAAS,GAAG,+CAA+C;AACrE,IAAI,IAAI,MAAM,GAAG,IAAI;AACrB,IAAI,IAAI,KAAK;AACb,IAAI,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;AACpD,QAAQ,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;AAChC,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,wBAAwB,CAAC;AACpE,QAAQ,IAAI,SAAS,EAAE;AACvB,YAAY,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;AACrC,YAAY,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;AAClD,YAAY,IAAI;AAChB,gBAAgB,MAAM,UAAU,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC;AACtE,gBAAgB,MAAM,QAAQ,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC;AAC/D,gBAAgB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC;AAC1D,YAAY;AACZ,YAAY,OAAO,KAAK,EAAE;AAC1B,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC,CAAC,CAAC;AACvE,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,MAAM;AACjB;AACA,eAAe,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE;AAC5C,IAAI,MAAM,WAAW,GAAG,uDAAuD;AAC/E,IAAI,IAAI,MAAM,GAAG,IAAI;AACrB,IAAI,IAAI,KAAK;AACb,IAAI,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;AACtD,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC;AAClC,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC;AAClE,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;AACnC,YAAY,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;AAChD,YAAY,IAAI;AAChB,gBAAgB,MAAM,SAAS,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;AACpE,gBAAgB,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC;AACpE,gBAAgB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC;AAChE,YAAY;AACZ,YAAY,OAAO,KAAK,EAAE;AAC1B,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC,CAAC;AAClE,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,MAAM;AACjB;AACA,eAAe,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE;AAC3C,IAAI,MAAM,QAAQ,GAAG,0CAA0C;AAC/D,IAAI,IAAI,MAAM,GAAG,IAAI;AACrB,IAAI,IAAI,KAAK;AACb,IAAI,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;AACnD,QAAQ,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;AAC/B,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC;AAClE,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;AACnC,YAAY,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AACzC,gBAAgB;AAChB,YAAY;AACZ,YAAY,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;AACjD,YAAY,IAAI;AAChB,gBAAgB,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;AAC7E,gBAAgB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;AACjD,gBAAgB,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtE,gBAAgB,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3F,gBAAgB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC;AAC1D,YAAY;AACZ,YAAY,OAAO,KAAK,EAAE;AAC1B,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC;AACzE,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,MAAM;AACjB;AACA,eAAe,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE;AAC1C,IAAI,MAAM,SAAS,GAAG,4CAA4C;AAClE,IAAI,IAAI,MAAM,GAAG,IAAI;AACrB,IAAI,IAAI,KAAK;AACb,IAAI,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;AACpD,QAAQ,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;AAChC,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC;AAClE,QAAQ,IAAI,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,YAAY,EAAE;AACpE,YAAY;AACZ,QAAQ;AACR,QAAQ,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,wBAAwB,CAAC;AACpE,QAAQ,IAAI,SAAS,EAAE;AACvB,YAAY,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;AACrC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAC1C,gBAAgB;AAChB,YAAY;AACZ,YAAY,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;AACnD,YAAY,IAAI;AAChB,gBAAgB,MAAM,UAAU,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC9D,gBAAgB,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;AAC9E,gBAAgB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;AACjD,gBAAgB,MAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC5D,gBAAgB,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACnE,gBAAgB,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAC/F,gBAAgB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC;AAC5D,YAAY;AACZ,YAAY,OAAO,KAAK,EAAE;AAC1B,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC,CAAC;AAClE,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,MAAM;AACjB;AACA,SAAS,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE;AAC7B,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACjD,IAAI;AACJ,SAAS;AACT,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;AAClC,IAAI;AACJ;AACA,SAAS,WAAW,CAAC,GAAG,EAAE;AAC1B,IAAI,MAAM,SAAS,GAAG;AACtB,QAAQ,GAAG,EAAE,eAAe;AAC5B,QAAQ,GAAG,EAAE,WAAW;AACxB,QAAQ,GAAG,EAAE,YAAY;AACzB,QAAQ,IAAI,EAAE,YAAY;AAC1B,QAAQ,GAAG,EAAE,WAAW;AACxB,QAAQ,GAAG,EAAE,cAAc;AAC3B,QAAQ,IAAI,EAAE,WAAW;AACzB,QAAQ,KAAK,EAAE,YAAY;AAC3B,QAAQ,GAAG,EAAE,UAAU;AACvB,QAAQ,GAAG,EAAE;AACb,KAAK;AACL,IAAI,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,0BAA0B;AACvD;;ACpJA;AACA;AACA;AACA;AACA,SAAS,eAAe,CAAC,UAAU,EAAE;AACrC,IAAI,IAAI,CAAC,UAAU;AACnB,QAAQ,OAAO,EAAE;AACjB,IAAI,IAAI;AACR;AACA,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;AAC7C,QAAQ,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC;AACxD,IAAI;AACJ,IAAI,MAAM;AACV;AACA,QAAQ,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACjF,IAAI;AACJ;AACA;AACA;AACA;AACA,eAAe,aAAa,CAAC,OAAO,EAAE;AACtC,IAAI,MAAM,SAAS,GAAG,EAAE;AACxB,IAAI,IAAI;AACR,QAAQ,MAAM,OAAO,GAAG,MAAMA,QAAE,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;AAC1E,QAAQ,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;AACrC,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC;AACtD,YAAY,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;AACrC;AACA,gBAAgB,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC;AAC9D,gBAAgB,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;AAC3C,YAAY;AACZ,iBAAiB,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;AACnF,gBAAgB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;AACxC,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,KAAK,EAAE;AAClB,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC;AACnE,IAAI;AACJ,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,eAAe,WAAW,CAAC,UAAU,EAAE;AACvC,IAAI,MAAM,aAAa,GAAG,EAAE;AAC5B,IAAI,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;AACxC,QAAQ,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC;AAC/C,QAAQ,IAAI;AACZ,YAAY,MAAM,IAAI,GAAG,MAAMA,QAAE,CAAC,IAAI,CAAC,YAAY,CAAC;AACpD,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;AACpC;AACA,gBAAgB,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC;AACnE,gBAAgB,aAAa,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;AAChD,YAAY;AACZ,iBAAiB,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AACpC;AACA,gBAAgB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;AAChD,YAAY;AACZ,QAAQ;AACR,QAAQ,OAAO,KAAK,EAAE;AACtB,YAAY,OAAO,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,CAAC;AACxD,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,aAAa;AACxB;AACO,eAAe,IAAI,GAAG;AAC7B,IAAI,IAAI;AACR,QAAQ,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE;AACnD,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY;AACpD,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY;AACpD,QAAQ,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,MAAM;AAChE,QAAQ,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,KAAK,MAAM;AAC1E,QAAQ,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,KAAK,MAAM;AAC5E,QAAQ,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,KAAK,MAAM;AAC1E,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,MAAM;AACxE;AACA,QAAQ,IAAI,MAAM,GAAG,EAAE;AACvB,QAAQ,IAAI,MAAM,GAAG,EAAE;AACvB,QAAQ,IAAI,WAAW,KAAK,SAAS,EAAE;AACvC,YAAY,MAAM,GAAG,WAAW;AAChC,QAAQ;AACR,QAAQ,IAAI,WAAW,KAAK,SAAS,EAAE;AACvC,YAAY,MAAM,GAAG,WAAW;AAChC,QAAQ;AACR;AACA,QAAQ,IAAI,WAAW,KAAK,SAAS,IAAI,WAAW,KAAK,SAAS,EAAE;AACpE,YAAY,MAAM,GAAG,UAAU;AAC/B,QAAQ;AACR,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;AACvD,QAAQ;AACR;AACA,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,KAAK,CAAC;AACjD,QAAQ,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACrC,YAAY,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;AACtD,QAAQ;AACR;AACA,QAAQ,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC;AAC3D,QAAQ,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;AACxC,YAAY,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC;AACtE,YAAY;AACZ,QAAQ;AACR,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAC5E,QAAQ,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;AAC9C,YAAY,IAAI;AAChB,gBAAgB,MAAMA,QAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;AACzC,YAAY;AACZ,YAAY,MAAM;AAClB,gBAAgB,OAAO,CAAC,KAAK,CAAC,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjE,gBAAgB;AAChB,YAAY;AACZ,YAAY,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE;AAC3D,gBAAgB,YAAY;AAC5B,gBAAgB,aAAa;AAC7B,gBAAgB,YAAY;AAC5B,gBAAgB;AAChB,aAAa,CAAC;AACd,YAAY,IAAI,UAAU;AAC1B,YAAY,IAAI,SAAS,EAAE;AAC3B,gBAAgB,UAAU,GAAG,QAAQ;AACrC,YAAY;AACZ,iBAAiB;AACjB,gBAAgB,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC;AAC7C,gBAAgB,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClE,gBAAgB,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC;AAC7C;AACA,gBAAgB,IAAI,cAAc;AAClC,gBAAgB,IAAI,MAAM,IAAI,MAAM,EAAE;AACtC,oBAAoB,cAAc,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACtE,gBAAgB;AAChB,qBAAqB,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE;AAC5C,oBAAoB,cAAc,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7D,gBAAgB;AAChB,qBAAqB,IAAI,CAAC,MAAM,IAAI,MAAM,EAAE;AAC5C;AACA,oBAAoB,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AAChD,wBAAwB,cAAc,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACjE,oBAAoB;AACpB,yBAAyB;AACzB,wBAAwB,cAAc,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACjE,oBAAoB;AACpB,gBAAgB;AAChB,qBAAqB;AACrB;AACA,oBAAoB,cAAc,GAAG,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC5D,gBAAgB;AAChB,gBAAgB,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC;AACzD,YAAY;AACZ,YAAY,MAAMA,QAAE,CAAC,SAAS,CAAC,UAAU,EAAE,WAAW,EAAE,OAAO,CAAC;AAChE,YAAY,IAAI,SAAS,EAAE;AAC3B,gBAAgB,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;AACvD,YAAY;AACZ,iBAAiB;AACjB,gBAAgB,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;AACtE,YAAY;AACZ,QAAQ;AACR,IAAI;AACJ,IAAI,OAAO,KAAK,EAAE;AAClB,QAAQ,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC;AACvD,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACvB,IAAI;AACJ;AACA,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;AAC7B,IAAI,IAAI,EAAE;AACV;;;;"}