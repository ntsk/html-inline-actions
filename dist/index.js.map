{"version":3,"file":"index.js","sources":["../../src/streaming-base64.ts","../../src/html-inline.ts","../../src/index.ts"],"sourcesContent":["import { Transform } from 'stream'\nimport { createReadStream } from 'fs'\n\n/**\n * A streaming Transform class that converts binary data to Base64 encoding in chunks.\n *\n * This implementation provides memory-efficient Base64 encoding for large files by processing\n * data in small chunks rather than loading entire files into memory. The class handles the\n * 3-byte boundary requirement of Base64 encoding by buffering incomplete chunks and carrying\n * them over to the next transformation cycle.\n */\nexport class Base64Transform extends Transform {\n  private remainder = Buffer.alloc(0)\n\n  _transform(\n    chunk: Buffer,\n    _encoding: string,\n    callback: (error?: Error | null) => void\n  ) {\n    // Concatenate previous remainder with new chunk\n    const data = Buffer.concat([this.remainder, chunk])\n\n    // Base64 requires 3-byte chunks, so calculate processable length (multiple of 3)\n    const processLength = Math.floor(data.length / 3) * 3\n\n    if (processLength > 0) {\n      // Process the 3-byte aligned portion\n      const processData = data.slice(0, processLength)\n      this.push(processData.toString('base64'))\n\n      // Save remainder for next chunk\n      this.remainder = data.slice(processLength)\n    } else {\n      // If less than 3 bytes, save all as remainder\n      this.remainder = data\n    }\n\n    callback()\n  }\n\n  _flush(callback: (error?: Error | null) => void) {\n    // Process any remaining bytes at the end (with padding)\n    if (this.remainder.length > 0) {\n      this.push(this.remainder.toString('base64'))\n    }\n    callback()\n  }\n}\n\nexport async function streamToBase64(filePath: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    let base64Data = ''\n\n    const base64Transform = new Base64Transform()\n\n    base64Transform.on('data', (chunk: string) => {\n      base64Data += chunk\n    })\n\n    base64Transform.on('end', () => {\n      resolve(base64Data)\n    })\n\n    base64Transform.on('error', reject)\n\n    const readStream = createReadStream(filePath)\n    readStream.pipe(base64Transform)\n\n    readStream.on('error', reject)\n  })\n}\n\nexport async function createDataUrl(\n  filePath: string,\n  mimeType: string\n): Promise<string> {\n  try {\n    const base64Data = await streamToBase64(filePath)\n    return `data:${mimeType};base64,${base64Data}`\n  } catch (error) {\n    throw new Error(`Failed to create data URL for ${filePath}: ${error}`)\n  }\n}\n","import { promises as fs } from 'fs'\nimport { resolve, relative, isAbsolute, extname } from 'path'\nimport * as core from '@actions/core'\nimport { createDataUrl } from './streaming-base64.js'\n\ninterface InlineOptions {\n  ignoreScripts?: boolean\n  ignoreImages?: boolean\n  ignoreLinks?: boolean\n  ignoreStyles?: boolean\n}\n\nexport async function inlineHtml(\n  filePath: string,\n  options: InlineOptions = {}\n): Promise<string> {\n  const htmlContent = await fs.readFile(filePath, 'utf-8')\n  const basedir = resolve(filePath, '..')\n\n  let result = htmlContent\n\n  if (!options.ignoreStyles) {\n    result = await inlineStyles(result, basedir)\n  }\n\n  if (!options.ignoreScripts) {\n    result = await inlineScripts(result, basedir)\n  }\n\n  if (!options.ignoreImages) {\n    result = await inlineImages(result, basedir)\n  }\n\n  if (!options.ignoreLinks) {\n    result = await inlineLinks(result, basedir)\n  }\n\n  return result\n}\n\nasync function inlineStyles(html: string, basedir: string): Promise<string> {\n  const linkRegex = /<link\\s+([^>]*rel=[\"']stylesheet[\"'][^>]*)>/gi\n  let result = html\n  let match\n\n  while ((match = linkRegex.exec(html)) !== null) {\n    const linkTag = match[0]\n    const attributes = match[1]\n\n    const hrefMatch = attributes.match(/href=[\"']([^\"']+)[\"']/i)\n    if (hrefMatch) {\n      const href = hrefMatch[1]\n      const cssPath = fixPath(href, basedir)\n\n      try {\n        const cssContent = await fs.readFile(cssPath, 'utf-8')\n        const styleTag = `<style>${cssContent}</style>`\n        result = result.replace(linkTag, styleTag)\n      } catch (error) {\n        if (error instanceof Error) {\n          core.warning(\n            `Could not inline stylesheet: ${cssPath} - ${error.message}`\n          )\n        } else {\n          core.warning(`Could not inline stylesheet: ${cssPath}`)\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nasync function inlineScripts(html: string, basedir: string): Promise<string> {\n  const scriptRegex = /<script\\s+([^>]*src=[\"'][^\"']+[\"'][^>]*)><\\/script>/gi\n  let result = html\n  let match\n\n  while ((match = scriptRegex.exec(html)) !== null) {\n    const scriptTag = match[0]\n    const attributes = match[1]\n\n    const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/i)\n    if (srcMatch) {\n      const src = srcMatch[1]\n      const jsPath = fixPath(src, basedir)\n\n      try {\n        const jsContent = await fs.readFile(jsPath, 'utf-8')\n        const inlineScript = `<script>${jsContent}</script>`\n        result = result.replace(scriptTag, inlineScript)\n      } catch (error) {\n        if (error instanceof Error) {\n          core.warning(`Could not inline script: ${jsPath} - ${error.message}`)\n        } else {\n          core.warning(`Could not inline script: ${jsPath}`)\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nasync function inlineImages(html: string, basedir: string): Promise<string> {\n  const imgRegex = /<img\\s+([^>]*src=[\"'][^\"']+[\"'][^>]*)>/gi\n  let result = html\n  let match\n\n  while ((match = imgRegex.exec(html)) !== null) {\n    const imgTag = match[0]\n    const attributes = match[1]\n\n    const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/i)\n    if (srcMatch) {\n      const src = srcMatch[1]\n\n      if (src.startsWith('data:')) {\n        continue\n      }\n\n      const imgPath = fixPath(src, basedir)\n\n      try {\n        const ext = extname(imgPath).replace(/^\\./, '').toLowerCase()\n        const mimeType = getMimeType(ext)\n\n        const dataUrl = await createDataUrl(imgPath, mimeType)\n        const newImgTag = imgTag.replace(\n          /src=[\"'][^\"']+[\"']/i,\n          `src=\"${dataUrl}\"`\n        )\n        result = result.replace(imgTag, newImgTag)\n      } catch (error) {\n        if (error instanceof Error) {\n          core.warning(`Could not inline image: ${imgPath} - ${error.message}`)\n        } else {\n          core.warning(`Could not inline image: ${imgPath}`)\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nasync function inlineLinks(html: string, basedir: string): Promise<string> {\n  const linkRegex = /<link\\s+([^>]*href=[\"'][^\"']+[\"'][^>]*)>/gi\n  let result = html\n  let match\n\n  while ((match = linkRegex.exec(html)) !== null) {\n    const linkTag = match[0]\n    const attributes = match[1]\n\n    const relMatch = attributes.match(/rel=[\"']([^\"']+)[\"']/i)\n    if (relMatch && relMatch[1].toLowerCase() === 'stylesheet') {\n      continue\n    }\n\n    const hrefMatch = attributes.match(/href=[\"']([^\"']+)[\"']/i)\n    if (hrefMatch) {\n      const href = hrefMatch[1]\n\n      if (href.startsWith('data:')) {\n        continue\n      }\n\n      const linkPath = fixPath(href, basedir)\n\n      try {\n        const linkBuffer = await fs.readFile(linkPath)\n        const ext = extname(linkPath).replace(/^\\./, '').toLowerCase()\n        const mimeType = getMimeType(ext)\n        const base64 = linkBuffer.toString('base64')\n        const dataUrl = `data:${mimeType};base64,${base64}`\n\n        const newLinkTag = linkTag.replace(\n          /href=[\"'][^\"']+[\"']/i,\n          `href=\"${dataUrl}\"`\n        )\n        result = result.replace(linkTag, newLinkTag)\n      } catch (error) {\n        if (error instanceof Error) {\n          core.warning(`Could not inline link: ${linkPath} - ${error.message}`)\n        } else {\n          core.warning(`Could not inline link: ${linkPath}`)\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nfunction fixPath(p: string, basedir: string): string {\n  if (isAbsolute(p)) {\n    return resolve(basedir, relative('/', p))\n  } else {\n    return resolve(basedir, p)\n  }\n}\n\nfunction getMimeType(ext: string): string {\n  const mimeTypes: { [key: string]: string } = {\n    svg: 'image/svg+xml',\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    jpeg: 'image/jpeg',\n    gif: 'image/gif',\n    ico: 'image/x-icon',\n    woff: 'font/woff',\n    woff2: 'font/woff2',\n    ttf: 'font/ttf',\n    otf: 'font/otf'\n  }\n\n  return mimeTypes[ext] || 'application/octet-stream'\n}\n","import { promises as fs } from 'fs'\nimport { resolve, dirname, basename, extname, join } from 'path'\nimport * as core from '@actions/core'\nimport { inlineHtml } from './html-inline.js'\n\n/**\n * Parse input paths from GitHub Actions environment variable.\n * Supports both YAML array format and comma-separated string format.\n */\nfunction parseInputPaths(pathsInput: string): string[] {\n  if (!pathsInput) return []\n\n  try {\n    // Try parsing as JSON array (GitHub Actions converts YAML arrays to JSON)\n    const parsed = JSON.parse(pathsInput) as unknown\n    return Array.isArray(parsed) ? (parsed as string[]) : [parsed as string]\n  } catch {\n    // Fallback to comma-separated string (legacy support)\n    return pathsInput\n      .split(',')\n      .map(p => p.trim())\n      .filter(p => p.length > 0)\n  }\n}\n\n/**\n * Find all HTML files in a directory recursively.\n */\nasync function findHtmlFiles(dirPath: string): Promise<string[]> {\n  const htmlFiles: string[] = []\n\n  try {\n    const entries = await fs.readdir(dirPath, { withFileTypes: true })\n\n    for (const entry of entries) {\n      const fullPath = join(dirPath, entry.name)\n\n      if (entry.isDirectory()) {\n        // Recursively search subdirectories\n        const subFiles = await findHtmlFiles(fullPath)\n        htmlFiles.push(...subFiles)\n      } else if (entry.isFile() && entry.name.toLowerCase().endsWith('.html')) {\n        htmlFiles.push(fullPath)\n      }\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      core.warning(`Could not read directory: ${dirPath} - ${error.message}`)\n    } else {\n      core.warning(`Could not read directory: ${dirPath}`)\n    }\n  }\n\n  return htmlFiles\n}\n\n/**\n * Expand paths to include HTML files from directories.\n */\nasync function expandPaths(inputPaths: string[]): Promise<string[]> {\n  const expandedPaths: string[] = []\n\n  for (const inputPath of inputPaths) {\n    const resolvedPath = resolve(inputPath)\n\n    try {\n      const stat = await fs.stat(resolvedPath)\n\n      if (stat.isDirectory()) {\n        // If directory, find all HTML files\n        const htmlFiles = await findHtmlFiles(resolvedPath)\n        expandedPaths.push(...htmlFiles)\n      } else if (stat.isFile()) {\n        // If file, add as-is\n        expandedPaths.push(resolvedPath)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        core.warning(`Path not found: ${inputPath} - ${error.message}`)\n      } else {\n        core.warning(`Path not found: ${inputPath}`)\n      }\n    }\n  }\n\n  return expandedPaths\n}\n\nexport async function main(): Promise<void> {\n  try {\n    const paths = core.getInput('paths') || ''\n    const inputPrefix = core.getInput('prefix')\n    const inputSuffix = core.getInput('suffix')\n    const overwrite = core.getBooleanInput('overwrite')\n\n    const ignoreStyles = core.getBooleanInput('ignore-styles')\n    const ignoreScripts = core.getBooleanInput('ignore-scripts')\n    const ignoreImages = core.getBooleanInput('ignore-images')\n    const ignoreLinks = core.getBooleanInput('ignore-links')\n\n    // If neither prefix nor suffix is specified, use default prefix\n    let prefix = ''\n    let suffix = ''\n\n    if (inputPrefix !== undefined) {\n      prefix = inputPrefix\n    }\n\n    if (inputSuffix !== undefined) {\n      suffix = inputSuffix\n    }\n\n    // Apply default prefix only if both are unspecified\n    if (inputPrefix === undefined && inputSuffix === undefined) {\n      prefix = 'inlined-'\n    }\n\n    if (!paths) {\n      throw new Error('Input paths are required')\n    }\n\n    // Parse input paths (supports YAML arrays and comma-separated strings)\n    const inputPaths = parseInputPaths(paths)\n    if (inputPaths.length === 0) {\n      throw new Error('No valid paths provided')\n    }\n\n    // Expand directories to HTML files\n    const expandedPaths = await expandPaths(inputPaths)\n    if (expandedPaths.length === 0) {\n      core.warning('No HTML files found in the specified paths')\n      return\n    }\n\n    core.info(`Found ${expandedPaths.length} HTML file(s) to process`)\n\n    for (const filePath of expandedPaths) {\n      try {\n        await fs.access(filePath)\n      } catch {\n        core.error(`File not accessible: ${filePath}`)\n        continue\n      }\n\n      const inlinedHtml = await inlineHtml(filePath, {\n        ignoreStyles,\n        ignoreScripts,\n        ignoreImages,\n        ignoreLinks\n      })\n\n      let outputPath: string\n\n      if (overwrite) {\n        outputPath = filePath\n      } else {\n        const dir = dirname(filePath)\n        const name = basename(filePath, extname(filePath))\n        const ext = extname(filePath)\n\n        // Handle flexible prefix/suffix combinations\n        let outputFileName: string\n        if (prefix && suffix) {\n          outputFileName = `${prefix}${name}${suffix}${ext}`\n        } else if (prefix && !suffix) {\n          outputFileName = `${prefix}${name}${ext}`\n        } else if (!prefix && suffix) {\n          // If suffix contains dot, treat it as part of extension\n          if (suffix.startsWith('.')) {\n            outputFileName = `${name}${suffix}${ext}`\n          } else {\n            outputFileName = `${name}${suffix}${ext}`\n          }\n        } else {\n          // Both prefix and suffix are empty, use default suffix\n          outputFileName = `${name}-inlined${ext}`\n        }\n\n        outputPath = resolve(dir, outputFileName)\n      }\n\n      await fs.writeFile(outputPath, inlinedHtml, 'utf-8')\n\n      if (overwrite) {\n        core.info(`Overwritten: ${filePath}`)\n      } else {\n        core.info(`Processed: ${filePath} -> ${outputPath}`)\n      }\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      core.setFailed(`Error processing files: ${error.message}`)\n    } else {\n      core.setFailed('Error processing files: Unknown error')\n    }\n    return\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main()\n}\n"],"names":["fs"],"mappings":"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"}