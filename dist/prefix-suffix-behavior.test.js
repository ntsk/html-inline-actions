"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_test_1 = require("node:test");
const node_assert_1 = require("node:assert");
const fs_1 = require("fs");
const path_1 = require("path");
const os_1 = require("os");
const index_1 = require("./index");
(0, node_test_1.test)('should use default prefix when neither prefix nor suffix specified', async () => {
    const tempDir = await fs_1.promises.mkdtemp((0, path_1.join)((0, os_1.tmpdir)(), 'html-inline-action-test-'));
    const cssContent = 'body { color: red; }';
    const htmlContent = `<html><head><link rel="stylesheet" href="style.css"></head><body>Test</body></html>`;
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'style.css'), cssContent);
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'test.html'), htmlContent);
    process.env.INPUT_PATHS = (0, path_1.join)(tempDir, 'test.html');
    process.env.INPUT_BASEDIR = tempDir;
    await (0, index_1.main)();
    const outputExists = await fs_1.promises.access((0, path_1.join)(tempDir, 'inlined-test.html')).then(() => true, () => false);
    (0, node_assert_1.strictEqual)(outputExists, true);
    await fs_1.promises.rm(tempDir, { recursive: true });
    delete process.env.INPUT_PATHS;
    delete process.env.INPUT_BASEDIR;
});
(0, node_test_1.test)('should not use default prefix when prefix is explicitly specified', async () => {
    const tempDir = await fs_1.promises.mkdtemp((0, path_1.join)((0, os_1.tmpdir)(), 'html-inline-action-test-'));
    const cssContent = 'body { color: blue; }';
    const htmlContent = `<html><head><link rel="stylesheet" href="style.css"></head><body>Test</body></html>`;
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'style.css'), cssContent);
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'test.html'), htmlContent);
    process.env.INPUT_PATHS = (0, path_1.join)(tempDir, 'test.html');
    process.env.INPUT_PREFIX = 'custom-';
    process.env.INPUT_BASEDIR = tempDir;
    await (0, index_1.main)();
    const outputExists = await fs_1.promises.access((0, path_1.join)(tempDir, 'custom-test.html')).then(() => true, () => false);
    (0, node_assert_1.strictEqual)(outputExists, true);
    await fs_1.promises.rm(tempDir, { recursive: true });
    delete process.env.INPUT_PATHS;
    delete process.env.INPUT_PREFIX;
    delete process.env.INPUT_BASEDIR;
});
(0, node_test_1.test)('should not use default prefix when suffix is explicitly specified', async () => {
    const tempDir = await fs_1.promises.mkdtemp((0, path_1.join)((0, os_1.tmpdir)(), 'html-inline-action-test-'));
    const cssContent = 'body { color: green; }';
    const htmlContent = `<html><head><link rel="stylesheet" href="style.css"></head><body>Test</body></html>`;
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'style.css'), cssContent);
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'test.html'), htmlContent);
    process.env.INPUT_PATHS = (0, path_1.join)(tempDir, 'test.html');
    process.env.INPUT_SUFFIX = '-processed';
    process.env.INPUT_BASEDIR = tempDir;
    await (0, index_1.main)();
    const outputExists = await fs_1.promises.access((0, path_1.join)(tempDir, 'test-processed.html')).then(() => true, () => false);
    (0, node_assert_1.strictEqual)(outputExists, true);
    await fs_1.promises.rm(tempDir, { recursive: true });
    delete process.env.INPUT_PATHS;
    delete process.env.INPUT_SUFFIX;
    delete process.env.INPUT_BASEDIR;
});
(0, node_test_1.test)('should use both when prefix and suffix are explicitly specified', async () => {
    const tempDir = await fs_1.promises.mkdtemp((0, path_1.join)((0, os_1.tmpdir)(), 'html-inline-action-test-'));
    const cssContent = 'body { color: purple; }';
    const htmlContent = `<html><head><link rel="stylesheet" href="style.css"></head><body>Test</body></html>`;
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'style.css'), cssContent);
    await fs_1.promises.writeFile((0, path_1.join)(tempDir, 'test.html'), htmlContent);
    process.env.INPUT_PATHS = (0, path_1.join)(tempDir, 'test.html');
    process.env.INPUT_PREFIX = 'pre-';
    process.env.INPUT_SUFFIX = '-suf';
    process.env.INPUT_BASEDIR = tempDir;
    await (0, index_1.main)();
    const outputExists = await fs_1.promises.access((0, path_1.join)(tempDir, 'pre-test-suf.html')).then(() => true, () => false);
    (0, node_assert_1.strictEqual)(outputExists, true);
    await fs_1.promises.rm(tempDir, { recursive: true });
    delete process.env.INPUT_PATHS;
    delete process.env.INPUT_PREFIX;
    delete process.env.INPUT_SUFFIX;
    delete process.env.INPUT_BASEDIR;
});
